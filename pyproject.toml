[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "webcat-mcp"
version = "2.3.0"
description = "Web search and content extraction with Model Context Protocol (MCP) support"
readme = "README.md"
requires-python = "==3.11.*"
license = { text = "MIT" }
authors = [
    { name = "Travis Frisinger", email = "travis@frisinger.com" }
]
keywords = ["mcp", "web-scraping", "search", "fastapi", "ai", "content-extraction"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
]
dependencies = [
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "readability-lxml>=0.8.1",
    "lxml_html_clean>=0.1.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pydantic>=2.4.0",
    "sse-starlette>=1.6.0",
    "httpx>=0.24.0",
    "fastmcp>=2.7.0",
    "html2text>=2020.1.16",
    "duckduckgo-search>=3.9.0",
    "trafilatura>=1.6.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting
    "black>=23.0.0",
    "isort>=5.12.0",
    "autoflake>=2.0.0",
    "autopep8>=2.0.0",
    # Linting and static analysis
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.0",
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "httpx>=0.24.0",
    "testcontainers>=3.7.0",
    # Security
    "bandit>=1.7.0",
    "safety>=2.3.0",
    # Pre-commit hooks
    "pre-commit>=3.3.0",
    # Development tools
    "ipdb>=0.13.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
    # Build and release
    "build>=0.10.0",
    "twine>=4.0.0",
    "pip-tools>=7.0.0",
    "tox>=4.6.0",
    # Profiling
    "line-profiler>=4.0.0",
    "memory-profiler>=0.61.0",
    # CLI tools
    "click>=8.1.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "testcontainers>=3.7.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
all = [
    # Install all optional dependencies
    "webcat-mcp[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/travisfrisinger/webcat"
Repository = "https://github.com/travisfrisinger/webcat"
Documentation = "https://github.com/travisfrisinger/webcat#readme"
"Bug Tracker" = "https://github.com/travisfrisinger/webcat/issues"

[project.scripts]
webcat = "docker.cli:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["docker", "customgpt", "examples"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "readability.*",
    "html2text.*",
    "duckduckgo_search.*",
    "fastmcp.*",
    "sse_starlette.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=docker",
    "--cov=customgpt",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "docker/tests",
    "customgpt/tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require API keys",
]

# Coverage configuration
[tool.coverage.run]
source = ["docker", "customgpt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
# NOTE: Flake8 does not natively support pyproject.toml
# Configuration is in setup.cfg for compatibility
# This section is kept for documentation purposes only
[tool.flake8]
max-line-length = 88
select = ["E", "W", "F", "C", "B"]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (black handles this)
    "W503",  # line break before binary operator
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 88

# setuptools configuration
[tool.setuptools.packages.find]
where = ["."]
include = ["docker*", "customgpt*"]
exclude = ["tests*", "venv*", "examples*"]

[tool.setuptools.package-data]
docker = ["*.html", "*.css", "*.js"]
examples = ["*.html", "*.md"]
